JS code is non-blocking
So callbacks and events are used to change the order
of code execution

Event loop starts automatically.

The callback functions does not stop
later parts of the code. They does work
side by side.

There is default separation method to separate
different requests.

writeFileSync() sends response before executing itself
writeFile execute first and blocks rest of the code

npm init
nmp install nodemon
sudo npm install nodemon -g
npm install --save express
npm install --save body-parser
npm install --save ejs pug express-handlebars
npm install --save mysql2
npm install sequelize
npm install --save mongodb
npm install --save mongoose
npm install --save express-session
npm install --save connect-mongodb-session
npm install --save bcryptjs
npm install --save csurf
npm install --save pdfkit
npm install --save connect-flash
npm install --save express-validator
npm install --save multer
npm install --save jwt-redis
npm install --save helmet 
npm install --save compression
npm install --save morgan
npm install --save socket.io
npm install --save socket.io-client  (for client)
npm install google-auth-library --save

npx create-next-app
npm run dev
npm install next-redux-wrapper
npm install redux-thunk

To deploy nodemon.json is for server
which has alternative also
npm run start:dev

For backend deployment if there is no image in server
then it will gives CORS error

next() helps to go the next middleware

app.use(bodyParser.urlencoded({extended:false}));
{extended:false} for non-default features

'get', 'post' or others look for exact match
while 'use' only looks for the minimum match

Dynamic Routes
router.get("/products/delete", shopController.getProducts);
router.get("/products/:productId", shopController.getProducts);

if delete route was in 2nd, it will never be fired

Json file cant be empty

MySql community and MySql workBench downloads
sudo mysql -u root -p
Addy@789**$

sequelize.sync() automatic creates table if not exists

'getX' is not for templates and returns object
It is for further work returns array

app.use((req, res, next) => {
  User.findByPk(1)
    .then((user) => {
      req.user = user;
      next();
    })
    .catch();
});

return skips rest of the code in a middleware
while next() pass the execution from one middleware to another

app.use(bodyParser.urlencoded({ extended: false }));  //for html form
app.use(bodyParser.json());      //for json data

CORS error happens when front and back runs on different server

res.render, res.redirect, res.json() send response
res.setHeader does not send response 

json cannot carry image data so we need JS form
const formData = new FormData()
formData.append('title',obj.title)
(no header needs)

jwt.decode()
jwt.verify()

To send token with every request we cannot send it within get req
as it doesnot has any body, only post req has body

then(()=>{throw Error('Error!')}).catch(err=>{next(err)})

Node js does not care promises rather it is built with callback function

export const Handlaer = ()=>{} is for multiple export
export default Handlaer is for single export

extraction import {Handlaer} from 'component/anon'
extraction import Handlaer from 'component/anon'

 ReadingList.findAll({
    where: {
      // userUserId,
      [Op.or]: [
        { readingStatus: "Reading" },
        { readingStatus: "Start Reading" },
      ],
    },
    include: [{ model: Book }],
  })
